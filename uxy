#!/usr/bin/env python3

#  Copyright (c) 2019 Martin Sustrik
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"),
#  to deal in the Software without restriction, including without limitation
#  the rights to use, copy, modify, merge, publish, distribute, sublicense,
#  and/or sell copies of the Software, and to permit persons to whom
#  the Software is furnished to do so, subject to the following conditions:
#  The above copyright notice and this permission notice shall be included
#  in all copies or substantial portions of the Software.
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
#  IN THE SOFTWARE.

import argparse
import sys

import uxy_align
import uxy_csv
import uxy_du
import uxy_fmt
import uxy_grep
import uxy_ifconfig
import uxy_import
import uxy_json
import uxy_ls
import uxy_lsof
import uxy_netstat
import uxy_ps
import uxy_top
import uxy_trim
import uxy_w
import uxy_yaml

def main():

  # Start by finding the subcommand and splitting args meant for uxy itself and
  # the arguments to be passed to the subcommand (which may be an arbitrary
  # UNIX tool with arbitrary arguments).
  idx = len(sys.argv)
  for i in range(1, len(sys.argv)):
    if not sys.argv[i].startswith("-"):
      idx = i
      break
  parser = argparse.ArgumentParser(prog="uxy",
    description="Tool to manipulate UXY data.")
  parser.add_argument('-l', '--long', action="store_true", default=False,
    help = "produce more data")
  parser.add_argument('--test', action="store_true", default=False,
    help = "used for testing; don't use directly")
  parser.add_argument('subcommand', metavar="SUBCOMMAND",
    help = "subcommand to execute")
  uxy_args = parser.parse_args(sys.argv[1:idx + 1])
  subcommand = sys.argv[idx]
  args = sys.argv[idx:]
  subcommands = {
    "align": uxy_align.align,
    "du": uxy_du.du,
    "fmt": uxy_fmt.fmt,
    "from-csv": uxy_csv.from_csv,
    "from-json": uxy_json.from_json,
    "from-yaml": uxy_yaml.from_yaml,
    "grep": uxy_grep.grep,
    "ifconfig": uxy_ifconfig.ifconfig,
    "import": uxy_import.do_import,
    "ls": uxy_ls.ls,
    "lsof": uxy_lsof.lsof,
    "netstat": uxy_netstat.netstat,
    "ps": uxy_ps.ps,
    "to-csv": uxy_csv.to_csv,
    "to-json": uxy_json.to_json,
    "to-yaml": uxy_yaml.to_yaml,
    "top": uxy_top.top,
    "trim": uxy_trim.trim,
    "w": uxy_w.w,
  }
  if subcommand not in subcommands:
    print("uxy: invalid subcommand '%s' (choose from: %s)" % (subcommand,
      ", ".join(subcommands.keys())), file=sys.stderr)
    sys.exit(1)
  parser = argparse.ArgumentParser(prog="uxy",
    description="Tool to manipulate UXY data.")
  subcommands[subcommand](parser, args, uxy_args)

if __name__ == "__main__":
    main()
